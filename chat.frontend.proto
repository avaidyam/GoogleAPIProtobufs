message CPBClientGroupLinkSharingModification {
	optional CPBClientGroupLinkSharingStatus newStatus = 1;
}

message CPBClientSetGroupLinkSharingEnabledResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientEvent createdEvent = 2;
	optional CPBClientConversation updatedConversation = 3;
}

message CPBClientSetGroupLinkSharingEnabledRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientEventRequestHeader eventRequestHeader = 2;
	optional CPBClientGroupLinkSharingStatus groupLinkSharingStatus = 4;
}

message CPBClientStateUpdate {
	optional CPBClientStateUpdateHeader stateUpdateHeader = 1;
	optional CPBClientConversationNotification conversationNotification = 2;
	optional CPBClientEventNotification eventNotification = 3;
	optional CPBClientSetFocusNotification focusNotification = 4;
	optional CPBClientSetTypingNotification typingNotification = 5;
	optional CPBClientSetConversationNotificationLevelNotification notificationLevelNotification = 6;
	optional CPBClientReplyToInviteNotification replyToInviteNotification = 7;
	optional CPBClientWatermarkNotification watermarkNotification = 8;
	optional bytes deprecated10 = 10;
	optional CPBClientConversationViewModification viewModification = 11;
	optional CPBClientEasterEggNotification easterEggNotification = 12;
	optional CPBClientConversation clientConversation = 13;
	optional CPBClientSelfPresenceNotification selfPresenceNotification = 14;
	optional CPBClientDeleteActionNotification deleteNotification = 15;
	optional CPBClientPresenceNotification presenceNotification = 16;
	optional CPBClientBlockNotification blockNotification = 17;
	optional CPBClientInvitationWatermarkNotification invitationWatermarkNotification = 18;
	optional CPBClientConfigurationNotification configurationNotification = 19;
	optional CPBClientRichPresenceEnabledStateNotification richPresenceEnabledStateNotification = 20;
	optional CPBClientContactsNotification contactsNotification = 21;
	optional CPBClientConversationDeliveryMediumModification deliveryMediumModification = 23;
	optional CPBClientCallerIdConfigNotification callerIdConfigNotification = 28;
	optional CPBClientMarkEventObservedNotification markEventObservedNotification = 30;
	optional CPBClientGlobalNotificationLevelNotification globalNotificationLevelNotification = 31;
}

message CPBClientSetInviteSettingsResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional string consistencyToken = 2;
}

message CPBClientSetInviteSettingsRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientInviteSettings settingsToSet = 2;
	optional string consistencyToken = 3;
}

message CPBClientGetInviteSettingsResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientInviteSettings settings = 2;
}

message CPBClientGetInviteSettingsRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional string consistencyToken = 2;
}

message CPBClientInviteSettings_CircleLevel {
	optional int64 id_p = 1;
	optional string name = 2;
	optional CPBClientInviteSettings_NotificationLevel level = 3;
}

message CPBClientInviteSettings {
	optional CPBClientInviteSettings_NotificationLevel publicLevel = 1;
	optional CPBClientInviteSettings_NotificationLevel emailLevel = 2;
	optional CPBClientInviteSettings_NotificationLevel phoneLevel = 3;
	repeated CPBClientInviteSettings_CircleLevel circleLevelArray = 4;
}

message CPBClientOpenGroupConversationFromUrlResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientConversationId conversationId = 2;
	optional CPBClientEvent createdEvent = 3;
}

message CPBClientOpenGroupConversationFromUrlRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientEventRequestHeader eventRequestHeader = 2;
	optional string conversationURL = 3;
}

message CPBClientGetGroupConversationUrlResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional string groupConversationURL = 2;
}

message CPBClientGetGroupConversationUrlRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientConversationId conversationId = 2;
}

message CPBClientMarkEventObservedNotification {
	repeated CPBClientObservedConversationEvents observedConversationEventArray = 1;
}

message CPBClientMarkEventObservedResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	repeated CPBClientObservedConversationEvents observedConversationEventArray = 2;
}

message CPBClientObservedConversationEvents_ObservedEvent {
	optional string eventId = 1;
	optional uint64 lastObservedTimestamp = 2;
	optional CPBClientEventObservedStatus observedStatus = 3;
}

message CPBClientObservedConversationEvents {
	optional CPBClientConversationId conversationId = 1;
	repeated CPBClientObservedConversationEvents_ObservedEvent observedEventArray = 2;
}

message CPBClientMarkEventObservedRequest_MarkConversationObserved {
	optional CPBClientConversationId conversationId = 1;
	repeated string eventIdArray = 2;
}

message CPBClientMarkEventObservedRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated CPBClientMarkEventObservedRequest_MarkConversationObserved observedConversationEventArray = 2;
}

message CPBClientCallerIdConfigNotification {
	repeated CPBClientCallerIdSetting callerIdSettingArray = 1;
}

message CPBClientSetCallerIdConfigResponse {
	repeated CPBClientCallerIdSetting callerIdSettingArray = 1;
	optional CPBClientResponseHeader responseHeader = 2;
}

message CPBClientSetCallerIdConfigRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated CPBClientCallerIdConfig callerIdConfigArray = 2;
}

message CPBClientCallerIdConfig {
	optional GCVPhoneNumber callerIdPhoneNumber = 1;
	optional CPBClientCallerIdState callerIdState = 2;
}

message CPBClientContactsNotification {
	repeated CPBClientParticipantId dismissedParticipantIdArray = 1;
	repeated CPBClientParticipantId undismissedParticipantIdArray = 2;
	repeated CPBClientFavoriteUpdate updatedFavoriteArray = 3;
	optional CPBClientFavoritesNotification favoritesModified = 4;
}

message CPBClientFavoritesNotification {
	optional bytes currentVersion = 1;
}

message CPBClientBlockNotification {
	repeated CPBClientBlockStateChange blockStateChangeArray = 1;
}

message CPBClientBlockStateChange {
	optional CPBClientParticipantId participantId = 1;
	optional CPBClientBlockState newBlockState = 2;
}

message CPBClientEventNotification {
	optional CPBClientEvent event = 1;
}

message CPBClientConversationNotification {
	optional CPBClientConversation conversation = 1;
}

message CPBClientStateUpdateHeader {
	optional CPBActiveClientState activeClientState = 1;
	optional bytes deprecated2 = 2;
	optional uint64 requestTraceId = 3;
	optional uint64 currentServerTime = 5;
	optional string clientGeneratedRequestId = 7;
	optional string selfFanoutId = 8;
}

message CPBClientBatchUpdate {
	repeated CPBClientStateUpdate stateUpdateArray = 1;
}

message CPBClientInviteToken {
	optional string inviteTokenURL = 1;
}

message CPBClientSuggestions {
	repeated CPBClientSuggestion suggestionArray = 2;
}

message CPBClientEasterEggSuggestionInfo {
	optional int32 variationIndex = 1;
	optional int32 animationDurationMsec = 2;
	repeated string animatedAssetURLWithoutSuffixArray = 3;
	optional CPBClientEasterEggSuggestionInfo_ClientGemHorizontalAlignment horizontalAlignment = 4;
}

message CPBClientSuggestion {
	optional string suggestionId = 1;
	optional uint64 expirationTimeUsec = 2;
	optional CPBClientSuggestion_ClientSuggestionType type = 3;
	optional Attachment attachment = 6;
	optional CPBClientEasterEggSuggestionInfo easterEggSuggestionInfo = 7;
	optional string matchedMessageSubstring = 8;
	optional string smartReplyText = 9;
}

message CPBClientUrlRedirectWrapperResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	repeated CPBClientUrlRedirectResult redirectResultArray = 2;
}

message CPBClientUrlRedirectWrapperRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated CPBClientUrlRedirectSpec URLRedirectSpecArray = 2;
}

message CPBClientUrlRedirectResult {
	optional CPBClientUrlRedirectSpec redirectSpec = 1;
	optional string redirectedURL = 2;
	optional CPBClientUrlRedirectResult_ClientRedirectError redirectError = 3;
}

message CPBClientUrlRedirectSpec {
	optional CPBClientUrlRedirectSpec_ClientRedirectType redirectType = 1;
	optional string originalURL = 2;
}

message CPBClientConfigurationBitError {
	optional CPBClientConfigurationBitType configurationBitType = 1;
	optional string errorDescription = 2;
}

message CPBClientConfigurationNotification {
	repeated CPBClientConfigurationBit configurationBitChangeArray = 1;
	optional bool desktopAvailabilitySharingEnabled = 3;
}

message CPBClientConfigurationBit {
	optional CPBClientConfigurationBitType configurationBitType = 1;
	optional bool value = 2;
}

message CPBClientSetConfigurationBitResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	repeated CPBClientConfigurationBitError configurationBitErrorArray = 2;
}

message CPBClientSetConfigurationBitRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated CPBClientConfigurationBit configurationBitArray = 2;
	optional bool desktopAvailabilitySharingEnabled = 4;
}

message CPBClientFinishPhoneNumberVerificationResponse {
	optional CPBClientResponseHeader responseHeader = 1;
}

message CPBClientFinishPhoneNumberVerificationRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional GCVPhoneNumber phoneNumber = 2;
	optional string code = 3;
	optional bool discoverable = 4;
	repeated GCVPhoneNumber additionalDiscoverablePhoneNumberArray = 5;
	optional CPBClientPhoneNumberVerificationContext phoneNumberVerificationContext = 6;
}

message CPBClientStartPhoneNumberVerificationResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientPhoneNumberVerificationContext phoneNumberVerificationContext = 2;
	optional bool rateLimitExceeded = 3;
	optional uint32 smsToHumanCodeLength = 4;
}

message CPBClientStartPhoneNumberVerificationRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional GCVPhoneNumber phoneNumber = 2;
	optional CPBClientStartPhoneNumberVerificationRequest_ClientPhoneNumberVerificationMethod method = 3;
}

message CPBClientPhoneNumberVerificationContext {
}

message CPBClientSendOffnetworkInvitationResponse {
	optional CPBClientResponseHeader responseHeader = 1;
}

message CPBClientSendOffnetworkInvitationRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientOffnetworkAddress inviteeAddress = 2;
}

message CPBClientOffnetworkAddress {
	optional CPBClientOffnetworkAddress_Type type = 1;
	optional string phone = 2;
	optional string email = 3;
}

message CPBClientDeleteActionNotification {
	optional CPBClientConversationId conversationId = 1;
	optional CPBClientDeleteAction deleteAction = 2;
}

message CPBClientDeleteConversationResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientDeleteAction deleteAction = 2;
}

message CPBClientDeleteConversationRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientConversationId conversationId = 2;
	optional uint64 deleteUpperBoundTimestamp = 3;
	optional CPBClientDeleteType deleteType = 4;
	repeated string deleteEventIdArray = 5;
}

message CPBClientDeleteAction {
	optional uint64 deleteActionTimestamp = 1;
	optional uint64 deleteUpperBoundTimestamp = 2;
	optional CPBClientDeleteType deleteType = 3;
	repeated string deleteEventIdArray = 4;
}

message CPBClientInvitationWatermarkNotification {
}

message CPBClientUpdateInvitationWatermarkResponse {
	optional CPBClientResponseHeader responseHeader = 1;
}

message CPBClientUpdateInvitationWatermarkRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional uint64 latestReadTimestamp = 2;
}

message CPBClientWatermarkNotification {
	optional CPBClientParticipantId participantId = 1;
	optional CPBClientConversationId conversationId = 2;
	optional uint64 latestReadTimestamp = 3;
}

message CPBClientUpdateWatermarkResponse {
	optional CPBClientResponseHeader responseHeader = 1;
}

message CPBClientUpdateWatermarkRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientConversationId conversationId = 2;
	optional uint64 latestReadTimestamp = 3;
}

message CPBClientGetEntityByIdResponse_ClientEntityLookupResult {
	optional CPBClientEntityLookupSpec lookupSpec = 1;
	repeated CPBClientEntity entityArray = 2;
}

message CPBClientGetEntityByIdResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	repeated CPBClientEntity entityArray = 2;
	repeated CPBClientGetEntityByIdResponse_ClientEntityLookupResult entityResultArray = 3;
}

message CPBClientGetEntityByIdRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientEntityLookupSpec deprecated2 = 2;
	repeated CPBClientEntityLookupSpec batchLookupSpecArray = 3;
	repeated CPBClientAdditionalEntityData additionalEntityDataArray = 4;
}

message CPBClientEntityLookupSpec {
	optional string gaiaId = 1;
	optional string jid = 2;
	optional string email = 3;
	optional string phone = 4;
	optional string chatId = 5;
	optional bool createOffnetworkGaia = 6;
}

message CPBClientGetFavoritesResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	repeated CPBClientFavorite allFavoritesArray = 2;
	optional bytes currentVersion = 3;
}

message CPBClientGetFavoritesRequest {
	optional CPBClientRequestHeader requestHeader = 1;
}

message CPBClientUpdateFavoriteContactResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientUpdateFavoritesError error = 2;
	repeated CPBClientFavorite allFavoritesArray = 3;
	optional bytes currentVersion = 4;
}

message CPBClientUpdateFavoriteContactRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated CPBClientFavoriteUpdate updateArray = 2;
	optional bytes currentVersion = 3;
}

message CPBClientFavoriteUpdate {
	optional CPBClientFavorite favorite = 1;
	optional bool remove = 2;
}

message CPBClientFavorite {
	optional CPBClientParticipantId participantId = 1;
	optional int32 position = 2;
	optional CPBClientConversationId conversationId = 3;
}

message CPBClientSearchEntitiesResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	repeated CPBClientEntity entityArray = 2;
	optional bool incomplete = 3;
}

message CPBClientSearchEntitiesRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated bytes deprecated2Array = 2;
	optional string query = 3;
	optional int32 maxCount = 4;
	optional bool deprecated5 = 5;
	optional bool includePages = 6;
	optional bool includeIsBabelUser = 7;
	repeated CPBClientAdditionalEntityData additionalEntityDataArray = 8;
	optional int32 maxConversationCount = 9;
}

message CPBClientGetSuggestedEntitiesResponse_ClientContactResults {
	optional bool hashMatched = 1;
	optional bytes hash_p = 2;
	repeated CPBClientGetSuggestedEntitiesResponse_ClientContactResult contactArray = 3;
}

message CPBClientGetSuggestedEntitiesResponse_ClientContactResult {
	optional CPBClientEntity entity = 1;
	optional CPBClientInvitationStatus invitationStatus = 2;
	optional CPBClientConversationId conversationId = 3;
}

message CPBClientGetSuggestedEntitiesResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	repeated CPBClientEntity entityArray = 2;
	optional bool scoringFailed = 3;
	optional CPBClientGetSuggestedEntitiesResponse_ClientContactResults favorites = 4;
	optional CPBClientGetSuggestedEntitiesResponse_ClientContactResults contactsYouHangoutWith = 5;
	optional CPBClientGetSuggestedEntitiesResponse_ClientContactResults otherContactsOnHangouts = 6;
	optional CPBClientGetSuggestedEntitiesResponse_ClientContactResults otherContacts = 7;
	optional CPBClientGetSuggestedEntitiesResponse_ClientContactResults dismissedContacts = 8;
	optional CPBClientGetSuggestedEntitiesResponse_ClientContactResults pinnedFavorites = 9;
}

message CPBClientEntity {
	optional bytes deprecated1 = 1;
	optional bytes deprecated2 = 2;
	optional bytes deprecated3 = 3;
	optional bytes deprecated4 = 4;
	optional bytes deprecated5 = 5;
	optional bool invalid = 7;
	optional CPBClientPresence presence = 8;
	optional CPBClientParticipantId id_p = 9;
	optional CPBClientEntityProperties properties = 10;
	optional bool blocked = 11;
	optional CPBClientDomainProperties domainProperties = 12;
	optional CPBClientUserType entityType = 13;
	optional bool isBabelUser = 14;
	optional CPBClientEntity_BabelUserState babelUserState = 15;
	optional CPBClientInvitationStatus invitationStatus = 17;
	optional bool isAnonymousPhone = 18;
}

message CPBClientDomainProperties {
	optional bool showChatWarning = 1;
	optional bool phoneCallingEnabled = 2;
	optional bool voiceCallingEnabled = 3;
	optional bool videoCallingEnabled = 4;
	optional string domainName = 5;
	optional bool isPaidDasher = 6;
	optional CPBClientForceHistoryState forceHistoryState = 7;
	optional bytes deprecated8 = 8;
	optional CPBClientDomainProperties_ClientChatRestricted chatRestricted = 9;
	optional CPBClientDomainProperties_ClientDomainDefaultOtrSetting domainDefaultOtrSetting = 11;
	optional bool isRugbyUser = 12;
}

message CPBClientEntityProperties_ClientAffinity {
	optional CPBClientEntityProperties_ClientAffinity_ClientAffinityType affinityType = 1;
	optional double value = 2;
	optional string loggingId = 3;
}

message CPBClientEntityProperties {
	optional CPBClientEntityProperties_ProfileType type = 1;
	optional string displayName = 2;
	optional string firstName = 3;
	optional string photoURL = 4;
	repeated string emailArray = 5;
	repeated string phoneArray = 6;
	optional string location = 7;
	optional string organization = 8;
	optional string role = 9;
	optional bool inUsersDomain = 10;
	repeated string circleIdArray = 13;
	repeated GCVContactPhoneNumber phoneNumberArray = 14;
	optional string canonicalEmail = 15;
	repeated CPBClientEntityProperties_ClientAffinity affinityArray = 16;
}

message CPBClientGetSuggestedEntitiesRequest_ClientContactOptions {
	optional int32 maxCount = 1;
	optional bytes hash_p = 2;
}

message CPBClientGetSuggestedEntitiesRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated bytes deprecated2Array = 2;
	repeated bytes deprecated3Array = 3;
	optional int32 maxCount = 4;
	optional bool deprecated5 = 5;
	repeated CPBClientParticipantId givenIdArray = 6;
	optional bool includeLegacy = 7;
	optional CPBClientGetSuggestedEntitiesRequest_ClientContactOptions favoritesOptions = 8;
	optional CPBClientGetSuggestedEntitiesRequest_ClientContactOptions contactsYouHangoutWithOptions = 9;
	optional CPBClientGetSuggestedEntitiesRequest_ClientContactOptions otherContactsOnHangoutsOptions = 10;
	optional CPBClientGetSuggestedEntitiesRequest_ClientContactOptions otherContactsOptions = 11;
	optional CPBClientGetSuggestedEntitiesRequest_ClientContactOptions dismissedContactsOptions = 12;
	optional CPBClientGetSuggestedEntitiesRequest_ClientContactOptions pinnedFavoritesOptions = 13;
	optional bool includeIsBabelUser = 14;
	repeated CPBClientAdditionalEntityData additionalEntityDataArray = 15;
}

message CPBClientPhone {
	optional GCVPhoneNumber phoneNumber = 1;
	optional bool googleVoice = 2;
	optional CPBClientVerificationStatus verificationStatus = 3;
	optional bool discoverable = 4;
	optional CPBClientDiscoverabilityStatus discoverabilityStatus = 5;
	optional bool primary = 6;
}

message CPBClientPhoneData {
	repeated CPBClientPhone phoneArray = 1;
	repeated CPBClientCallerIdSetting callerIdSettingArray = 2;
	optional CPBClientCallerIdSettingsMask callerIdSettingsMask = 3;
}

message CPBClientExperimentValue_Value {
	optional int64 longValue = 1;
	optional double doubleValue = 2;
	optional string stringValue = 3;
	optional bool boolValue = 4;
}

message CPBClientExperimentValue {
	optional string hexFlagId = 1;
	optional CPBClientExperimentValue_FlagType flagType = 2;
	optional CPBClientExperimentValue_Value value = 3;
	optional CPBClientExperimentValue_LogAction logAction = 4;
}

message CPBClientCallerIdSetting {
	optional GCVPhoneNumber callerIdPhoneNumber = 1;
	optional CPBClientCallerIdSetting_ClientIneligibilityCause ineligibilityCause = 2;
	optional CPBHEligibleCallerIdToken callerIdToken = 3;
	optional bool defaultCallerId = 4;
}

message CPBClientGetSelfInfoResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientEntity selfEntity = 2;
	optional bool isKnownMinor = 3;
	optional CPBClientDndState dndState = 5;
	optional CPBClientPhoneData phoneData = 7;
	repeated CPBClientConfigurationBit configurationBitArray = 8;
	optional bool googlePlusUser = 10;
	optional CPBClientRichPresenceState richPresenceState = 12;
	optional bool babelUser = 13;
	optional bool desktopAvailabilitySharingEnabled = 14;
	optional bool googlePlusMobileUser = 15;
	repeated CPBClientParticipantId managedPlusPageArray = 17;
	optional CPBClientGetSelfInfoResponse_AccountAgeGroup accountAgeGroup = 18;
	repeated CPBClientExperimentValue mobileExperimentArray = 20;
	optional CPBClientNotificationLevel defaultNotificationLevel = 24;
}

message CPBClientGetSelfInfoRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated CPBClientGetSelfInfoRequest_ClientRequestedFieldMask requiredFieldsArray = 2;
	repeated CPBClientGetSelfInfoRequest_ClientRequestedFieldMask optionalFieldsArray = 3;
	optional bool upgradeToBabel = 4;
}

message CPBClientConversationDeliveryMediumModification {
	optional CPBClientConversationId conversationId = 1;
	optional CPBClientDeliveryMedium newDeliveryMedium = 2;
}

message CPBClientConversationViewModification {
	optional CPBClientConversationId conversationId = 1;
	optional CPBClientConversationView oldView = 2;
	optional CPBClientConversationView newView = 3;
}

message CPBClientModifyConversationViewResponse {
	optional CPBClientResponseHeader responseHeader = 1;
}

message CPBClientModifyConversationViewRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientConversationId conversationId = 2;
	optional CPBClientConversationView newView = 3;
	optional uint64 lastEventTimestamp = 4;
}

message CPBClientReplyToInviteNotification {
	optional CPBClientConversationId conversationId = 1;
	optional CPBClientReplyToInviteType type = 2;
}

message CPBClientReplyToInviteResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientConversation updatedConversation = 2;
}

message CPBClientReplyToInviteRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientConversationId conversationId = 2;
	optional CPBClientReplyToInviteType type = 3;
	optional uint64 clientGeneratedId = 4;
	repeated CPBClientDeclineSignal declineSignalArray = 5;
}

message CPBClientDeclineAllInvitesResponse {
	optional CPBClientResponseHeader responseHeader = 1;
}

message CPBClientDeclineAllInvitesRequest_ClientDeclineAllInvitesWatermarkSpec {
	optional uint64 upToTimestamp = 1;
	optional CPBClientInvitationAffinity affinity = 2;
}

message CPBClientDeclineAllInvitesRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated CPBClientDeclineAllInvitesRequest_ClientDeclineAllInvitesWatermarkSpec declineAllWatermarkArray = 2;
}

message CPBClientSelfPresenceNotification {
	optional CPBClientPresence presence = 2;
	optional CPBClientDndState dndState = 3;
	optional CPBClientRichPresenceState richPresenceState = 6;
}

message CPBClientInCallState {
	optional CPBClientClientIdentifier clientIdentifier = 1;
	optional CPBClientInCall_ClientCallType callType = 2;
	optional uint64 expirationTimestamp = 3;
}

message CPBClientStatusMessageState {
	repeated CPBClientMessageContent statusMessageArray = 1;
	optional uint64 expirationTimestamp = 2;
}

message CPBClientRichPresenceState {
	repeated CPBClientInCallState inCallArray = 2;
	repeated CPBClientRichPresenceEnabledState richPresenceEnabledStateArray = 3;
	optional CPBClientStatusMessageState statusMessage = 4;
}

message CPBClientDndState {
	optional bool doNotDisturb = 1;
	optional int64 expirationTimestamp = 2;
	optional int64 version = 3;
}

message CPBClientInCallSetting {
	optional CPBClientInCall_ClientCallType callType = 1;
	optional uint64 timeoutSecs = 2;
}

message CPBClientStatusMessageSetting {
	repeated CPBClientChatMessageSpec statusMessageArray = 1;
}

message CPBClientDndSetting {
	optional bool doNotDisturb = 1;
	optional uint64 timeoutSecs = 2;
}

message CPBClientRichPresenceEnabledStateNotification {
	repeated CPBClientRichPresenceEnabledState richPresenceEnabledStateArray = 1;
}

message CPBClientGetRichPresenceEnabledStateResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	repeated CPBClientRichPresenceEnabledState richPresenceEnabledStateArray = 2;
}

message CPBClientGetRichPresenceEnabledStateRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated CPBClientRichPresenceType requestedRichPresenceEnabledStateArray = 2;
}

message CPBClientSetRichPresenceEnabledStateResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	repeated CPBClientRichPresenceEnabledState updatedRichPresenceEnabledStateArray = 2;
}

message CPBClientSetRichPresenceEnabledStateRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated CPBClientRichPresenceEnabledState richPresenceEnabledStateArray = 2;
}

message CPBClientRichPresenceEnabledState {
	optional CPBClientRichPresenceType type = 1;
	optional bool enabled = 2;
}

message CPBClientPresenceStateSetting {
	optional uint64 timeoutSecs = 1;
	optional CPBClientPresenceStateSetting_ClientPresenceState presenceState = 2;
}

message CPBClientSetPresenceResponse {
	optional CPBClientResponseHeader responseHeader = 1;
}

message CPBClientSetPresenceRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientPresenceStateSetting presenceStateSetting = 2;
	optional CPBClientDndSetting dndSetting = 3;
	optional CPBClientInCallSetting inCallSetting = 7;
	optional CPBClientStatusMessageSetting statusMessageSetting = 8;
}

message CPBClientDeviceStatus {
	optional bool mobile = 1;
	optional bool desktop = 2;
	optional bool tablet = 3;
}

message CPBClientInCall {
	optional CPBClientInCall_ClientCallType callType = 1;
}

message CPBClientStatusMessage {
	repeated CPBClientMessageContent statusMessageArray = 1;
}

message CPBClientLastSeen {
	optional uint64 lastSeenTimestampUsec = 1;
}

message CPBClientPresence {
	optional bool reachable = 1;
	optional bool available = 2;
	optional CPBClientInCall inCall = 5;
	optional CPBClientDeviceStatus deviceStatus = 6;
	optional CPBClientDeviceActivity deviceActivity = 7;
	optional CPBClientStatusMessage statusMessage = 9;
	optional CPBClientLastSeen lastSeen = 10;
}

message CPBClientQueryPresenceResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	repeated CPBClientPresenceResult presenceResultArray = 2;
}

message CPBClientQueryPresenceRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated CPBClientParticipantId participantIdArray = 2;
	repeated CPBClientQueryPresenceRequest_ClientFieldMask fieldMaskArray = 3;
}

message CPBClientPresenceNotification {
	repeated CPBClientPresenceResult presenceArray = 1;
}

message CPBClientPresenceResult {
	optional CPBClientParticipantId userId = 1;
	optional CPBClientPresence presence = 2;
}

message CPBClientDeviceActivity {
	optional CPBClientDeviceActivity_Type type = 1;
	optional int32 confidence = 2;
}

message CPBClientSetActiveClientResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientSetActiveClientResponse_ClientSetActiveClientError error = 2;
	optional uint64 clientLastSeenTimestampUsec = 3;
	optional uint64 lastSeenDeltaUsec = 4;
}

message CPBClientSetActiveClientRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional bool isActive = 2;
	optional string fullJid = 3;
	optional uint32 timeoutSecs = 4;
	optional bool updateLastSeenTimestamp = 5;
}

message CPBClientRegisterDeviceResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientUpgradeType upgradeType = 2;
	optional string upgradeExplanationURL = 3;
	optional string fullJid = 5;
	optional int32 iosBadgeCount = 6;
	optional string clientResource = 7;
	optional string learnMoreURL = 8;
}

message CPBClientRegisterDeviceRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientDeviceType deviceType = 2;
	optional CPBClientRegistrationType registrationType = 3;
	optional string locale = 4;
	optional string stateUpdateVersion = 5;
	optional string iosAppId = 7;
	optional bytes iosToken = 8;
	optional int64 androidId = 9;
	optional string androidRegistrationId = 10;
	repeated string iosCapabilityArray = 11;
	repeated string androidCapabilityArray = 12;
	optional string pstnNumber = 13;
	repeated string pstnCapabilityArray = 14;
	optional string name = 15;
	optional string androidAppId = 16;
	optional string androidDeveloperAccount = 17;
	optional string iosDeviceId = 18;
	repeated string glassCapabilityArray = 19;
	optional string pstnAppId = 20;
	optional string unregisterOnBehalfOfGaiaId = 21;
	optional int32 iosScreenSizeDps = 22;
	optional int32 androidScreenSizeDps = 23;
	optional string iosMcsRegistrationId = 24;
	optional string iosMcsAppId = 25;
	optional string iosMcsDeveloperAccount = 26;
	optional int32 pstnCarrierMcc = 27;
	optional int32 pstnCarrierMnc = 28;
	optional string iosPushOauthToken = 29;
	optional bool deviceAvailabilitySharingEnabled = 30;
	repeated string iosOauthTokensForParticipantsOnDeviceArray = 31;
	optional bytes iosPushkitToken = 33;
	optional string iosUploadedContactsPrivateKey = 34;
	optional string androidInstanceId = 35;
}

message CPBClientGlobalNotificationLevelNotification {
	optional CPBClientNotificationLevel level = 1;
}

message CPBClientSetConversationNotificationLevelNotification {
	optional CPBClientConversationId conversationId = 1;
	optional CPBClientNotificationLevel level = 2;
	optional int32 revertTimeoutSecs = 3;
	optional uint64 timestamp = 4;
}

message CPBClientSetConversationNotificationLevelResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional uint64 timestamp = 2;
}

message CPBClientSetConversationNotificationLevelRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientConversationId conversationId = 2;
	optional CPBClientNotificationLevel level = 3;
	optional int32 revertTimeoutSecs = 4;
}

message CPBClientEvent_ClientUserEventState {
	optional CPBClientParticipantId userId = 1;
	optional uint64 clientGeneratedId = 2;
	optional CPBClientNotificationLevel notificationLevel = 3;
	optional CPBClientSuggestions suggestions = 4;
}

message CPBClientEvent {
	optional CPBClientConversationId conversationId = 1;
	optional CPBClientParticipantId senderId = 2;
	optional uint64 timestamp = 3;
	optional CPBClientEvent_ClientUserEventState selfEventState = 4;
	optional CPBClientSourceType sourceType = 6;
	optional CPBClientChatMessage chatMessage = 7;
	optional CPBClientMembershipChange membershipChange = 9;
	optional CPBClientConversationRename conversationRename = 10;
	optional CPBClientHangoutEvent hangoutEvent = 11;
	optional string eventId = 12;
	optional int64 expirationTimestamp = 13;
	optional CPBClientOtrModification otrModification = 14;
	optional bool advancesSortTimestamp = 15;
	optional CPBClientOffTheRecordStatus eventOtr = 16;
	optional bool persisted = 17;
	optional CPBClientDeliveryMedium deliveryMedium = 20;
	optional CPBClientEventType eventType = 23;
	optional uint64 eventVersion = 24;
	optional int64 lastObservedTimestamp = 27;
	optional CPBClientEventObservedStatus observedStatus = 28;
	optional CPBClientObservedEvent observedEvent = 29;
	optional CPBClientGroupLinkSharingModification groupLinkSharingModification = 31;
}

message CPBClientObservedEvent {
	optional string observedEventId = 1;
}

message CPBClientOtrModification {
	optional CPBClientOffTheRecordStatus oldOtrStatus = 1;
	optional CPBClientOffTheRecordStatus newOtrStatus = 2;
	optional CPBClientOffTheRecordToggle oldOtrToggle = 3;
	optional CPBClientOffTheRecordToggle newOtrToggle = 4;
}

message CPBClientModifyOtrStatusResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional uint64 deprecated2 = 2;
	optional string deprecated3 = 3;
	optional CPBClientEvent createdEvent = 4;
	optional CPBClientConversation updatedConversation = 5;
	optional bool otrUnmodified = 6;
}

message CPBClientModifyOtrStatusRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional bytes deprecated2 = 2;
	optional CPBClientOffTheRecordStatus otrStatus = 3;
	optional uint64 deprecated4 = 4;
	optional CPBClientEventRequestHeader eventRequestHeader = 5;
}

message CPBClientGetConversationResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientConversationState conversationState = 2;
	optional CPBClientGetConversationResponse_ClientGetConversationError error = 3;
	optional CPBClientPresenceResult deprecated4 = 4;
	repeated CPBClientRichPresenceEnabledState richPresenceEnabledStateArray = 5;
	repeated CPBClientEntity entityArray = 7;
}

message CPBClientGetConversationRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientConversationSpec conversationSpec = 2;
	optional bool includeConversationMetadata = 3;
	optional bool includeEvents = 4;
	optional int32 maxEventsPerConversation = 6;
	optional CPBClientEventContinuationToken eventContinuationToken = 7;
	optional bool deprecated8 = 8;
	optional CPBClientEventContinuationToken forwardContinuationToken = 11;
}

message CPBClientConversationSpec {
	optional CPBClientConversationId conversationId = 1;
	repeated bytes deprecated2Array = 2;
	repeated CPBClientInviteeId inviteeIdArray = 3;
	optional CPBClientConversationType requestedType = 4;
	optional string eventId = 5;
}

message CPBClientSyncAllNewEventsResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional uint64 syncTimestamp = 2;
	repeated CPBClientConversationState conversationStateArray = 3;
	optional bool conversationIdsOnly = 4;
	optional bool clearCacheAndResync = 6;
	repeated CPBClientEntity entityArray = 7;
}

message CPBClientSyncAllNewEventsRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional uint64 lastSyncTimestamp = 2;
	repeated CPBClientLocalConversationState localStateArray = 3;
	optional int32 deprecated4 = 4;
	repeated bytes deprecated5Array = 5;
	optional bool noMissedEventsExpected = 6;
	repeated CPBClientUnreadConversationState unreadStateArray = 7;
	optional int32 maxResponseSizeBytes = 8;
}

message CPBClientUnreadConversationState {
	optional CPBClientConversationId conversationId = 1;
	optional uint64 latestReadTimestamp = 2;
}

message CPBClientLocalConversationState {
	optional CPBClientConversationId conversationId = 2;
	repeated string recentEventIdArray = 4;
}

message CPBClientSyncRecentConversationsResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional uint64 syncTimestamp = 2;
	repeated CPBClientConversationState conversationStateArray = 3;
	optional uint64 continuationEndTimestamp = 4;
	repeated CPBClientEntity entityArray = 6;
}

message CPBClientConversationState {
	optional CPBClientConversationId conversationId = 1;
	optional CPBClientConversation conversation = 2;
	repeated CPBClientEvent eventArray = 3;
	optional bool mustQuerySeparately = 4;
	optional CPBClientEventContinuationToken eventContinuationToken = 5;
	optional uint64 leaveTimestamp = 6;
	repeated CPBClientDeleteAction deleteActionArray = 7;
	optional CPBClientEventContinuationToken forwardContinuationToken = 8;
}

message CPBClientEventContinuationToken {
	optional string deprecated1 = 1;
	optional bytes storageContinuationToken = 2;
	optional uint64 eventTimestamp = 3;
}

message CPBClientSyncRecentConversationsRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional int64 endTimestamp = 2;
	optional int32 maxConversations = 3;
	optional int32 maxEventsPerConversation = 4;
	repeated CPBClientSyncFilter syncFilterArray = 5;
	optional bool includeEmptyActiveConversations = 7;
}

message CPBClientSetTypingNotification {
	optional CPBClientConversationId conversationId = 1;
	optional CPBClientParticipantId senderId = 2;
	optional uint64 timestamp = 3;
	optional CPBClientTypingType type = 4;
}

message CPBClientSetTypingResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional uint64 timestamp = 2;
}

message CPBClientSetTypingRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientConversationId conversationId = 2;
	optional CPBClientTypingType type = 3;
}

message CPBClientRecordAnalyticsEventsResponse {
	optional CPBClientResponseHeader responseHeader = 1;
}

message CPBClientRecordAnalyticsEventsRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	repeated CPBClientAnalyticsEvent analyticsEventArray = 2;
	optional uint64 localTimestamp = 4;
}

message CPBClientAnalyticsEvent {
	optional CPBClientAnalyticsEvent_EventType eventType = 1;
	optional int64 rpcGlobalId = 2;
	optional string eventDetail = 3;
	optional bool notified = 4;
	optional bool wasNewest = 5;
	optional bool pastWatermark = 6;
	optional bool userDnd = 7;
	optional bool inFocusedConversation = 8;
	optional CPBActiveClientState activeClientState = 9;
	optional CPBClientNotificationLevel notificationLevel = 10;
	optional uint64 deviceTimestampReceived = 11;
	optional string eventId = 12;
	optional uint64 clientGeneratedId = 13;
	optional CPBClientAnalyticsEvent_ChatAction chatAction = 14;
	optional int32 retryCount = 15;
}

message CPBClientEasterEggNotification {
	optional CPBClientParticipantId senderId = 1;
	optional CPBClientConversationId conversationId = 2;
	optional CPBClientEasterEgg easterEgg = 3;
}

message CPBClientEasterEggResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional uint64 timestamp = 2;
}

message CPBClientEasterEggRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientConversationId conversationId = 2;
	optional CPBClientEasterEgg easterEgg = 3;
}

message CPBClientEasterEgg {
	optional string message = 1;
	optional string payload = 2;
}

message CPBClientSetFocusNotification {
	optional CPBClientConversationId conversationId = 1;
	optional CPBClientParticipantId senderId = 2;
	optional uint64 timestamp = 3;
	optional CPBClientFocusType type = 4;
	optional uint32 timeoutSecs = 5;
}

message CPBClientSetFocusResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional uint64 timestamp = 2;
}

message CPBClientSetFocusRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientConversationId conversationId = 2;
	optional CPBClientFocusType type = 3;
	optional uint32 timeoutSecs = 4;
	optional bool queryFocus = 6;
}

message CPBClientHangoutEvent {
	optional CPBClientHangoutEventType eventType = 1;
	repeated CPBClientParticipantId participantIdArray = 2;
	optional int64 hangoutDurationSecs = 3;
	optional CPBClientConversationId transferredConversationId = 4;
	optional int64 refreshTimeoutSecs = 5;
	optional bool isPeriodicRefresh = 6;
	optional CPBClientHangoutMediaType mediaType = 7;
}

message CPBClientConversationRename {
	optional string newName = 1;
	optional string oldName = 2;
}

message CPBClientRenameConversationResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional uint64 deprecated2 = 2;
	optional string deprecated3 = 3;
	optional CPBClientEvent createdEvent = 4;
	optional CPBClientConversation updatedConversation = 5;
}

message CPBClientRenameConversationRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional bytes deprecated2 = 2;
	optional string newName = 3;
	optional uint64 deprecated4 = 4;
	optional CPBClientEventRequestHeader eventRequestHeader = 5;
}

message CPBClientRemoveUserResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional uint64 deprecated2 = 2;
	optional string deprecated3 = 3;
	optional CPBClientEvent createdEvent = 4;
	optional CPBClientConversation updatedConversation = 5;
}

message CPBClientRemoveUserRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional bytes deprecated2 = 2;
	optional CPBClientParticipantId participantId = 3;
	optional uint64 deprecated4 = 4;
	optional CPBClientEventRequestHeader eventRequestHeader = 5;
}

message CPBClientMembershipChange {
	optional CPBClientMembershipChangeType type = 1;
	repeated bytes deprecated2Array = 2;
	repeated CPBClientParticipantId participantIdArray = 3;
	optional CPBClientLeaveReason leaveReason = 4;
}

message CPBClientAddUserResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	repeated CPBClientInviteeError inviteeErrorArray = 2;
	optional uint64 deprecated3 = 3;
	optional string deprecated4 = 4;
	optional CPBClientEvent createdEvent = 5;
	optional CPBClientConversation updatedConversation = 6;
}

message CPBClientAddUserRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional bytes deprecated2 = 2;
	repeated CPBClientInviteeId inviteeIdArray = 3;
	optional uint64 deprecated4 = 4;
	optional CPBClientEventRequestHeader eventRequestHeader = 5;
}

message CPBClientChatMessage {
	optional CPBClientMessageContent messageContent = 3;
}

message CPBClientSendChatMessageResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional uint64 deprecated2 = 2;
	optional string deprecated3 = 3;
	repeated CPBClientMediaUploadInfo mediaUploadInfoArray = 4;
	optional bytes deprecated5 = 5;
	optional CPBClientEvent createdEvent = 6;
	optional CPBClientConversation updatedConversation = 7;
}

message CPBClientSendChatMessageRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional bytes deprecated2 = 2;
	optional uint64 deprecated3 = 3;
	optional CPBClientMessageContent messageContent = 6;
	optional CPBClientExistingMedia existingMedia = 7;
	optional CPBClientEventRequestHeader eventRequestHeader = 8;
	optional CPBClientInviteeId otherInviteeId = 9;
	optional CPBClientLocationSpec attachLocation = 10;
	optional CPBClientExternalImageSpec externalImageSpec = 11;
	repeated CPBClientChatMessageSpec chatMessageSpecArray = 12;
}

message CPBClientChatMessageSpec {
	repeated SocialSegment segmentArray = 1;
	optional CPBClientLocationSpec attachLocation = 3;
	optional CPBClientExternalImageSpec externalImageSpec = 4;
}

message CPBClientExternalImageSpec {
	optional string imageURL = 1;
	optional int32 width = 2;
	optional int32 height = 3;
	optional string containingWebpageURL = 4;
	optional string containingWebpageTitle = 5;
	optional string description_p = 6;
}

message CPBClientLocationSpec {
	optional EMPlaceV2 place = 1;
	optional bytes deprecated2 = 2;
}

message CPBClientConversation_ClientUserConversationState_ClientDeliveryMediumOption {
	optional CPBClientDeliveryMedium deliveryMedium = 1;
	optional bool currentDefault = 2;
	optional bool primary = 3;
}

message CPBClientConversation_ClientUserConversationState {
	optional uint64 clientGeneratedId = 2;
	optional CPBClientUserReadState selfReadState = 7;
	optional CPBClientConversationStatus status = 8;
	optional CPBClientNotificationLevel notificationLevel = 9;
	repeated CPBClientConversationView viewArray = 10;
	optional CPBClientParticipantId inviterId = 11;
	optional uint64 inviteTimestamp = 12;
	optional uint64 sortTimestamp = 13;
	optional uint64 activeTimestamp = 14;
	optional CPBClientConversation_ClientUserConversationState_InvitationAffinity inviteAffinity = 15;
	optional bool hasNoPersistentEvents = 16;
	repeated CPBClientConversation_ClientUserConversationState_ClientDeliveryMediumOption deliveryMediumOptionArray = 17;
	optional bool isGuest = 21;
}

message CPBClientConversation {
	optional CPBClientConversationId id_p = 1;
	optional CPBClientConversationType type = 2;
	optional string name = 3;
	optional CPBClientConversation_ClientUserConversationState selfConversationState = 4;
	repeated bytes deprecated5Array = 5;
	repeated bytes deprecated6Array = 6;
	repeated CPBClientUserReadState readStateArray = 8;
	optional bool hasActiveHangout = 9;
	optional CPBClientOffTheRecordStatus otrStatus = 10;
	optional CPBClientOffTheRecordToggle otrToggle = 11;
	optional bool deprecated12 = 12;
	repeated CPBClientParticipantId currentParticipantArray = 13;
	repeated CPBClientConversationParticipantData participantDataArray = 14;
	optional bool isTemporary = 15;
	optional bool forkOnExternalInvite = 16;
	repeated CPBClientConversation_ClientNetworkType networkTypeArray = 18;
	optional CPBClientForceHistoryState forceHistoryState = 19;
	optional string conversationAvatarMediaKey = 20;
	optional CPBClientGroupLinkSharingStatus groupLinkSharingStatus = 22;
}

message CPBClientUserReadState {
	optional CPBClientParticipantId participantId = 1;
	optional uint64 latestReadTimestamp = 2;
}

message CPBClientCreateConversationResponse {
	optional CPBClientResponseHeader responseHeader = 1;
	optional CPBClientConversation conversation = 2;
	repeated CPBClientInviteeError inviteeErrorArray = 3;
	optional uint64 deprecated4 = 4;
	optional string deprecated5 = 5;
	repeated bytes deprecated6Array = 6;
	optional bool newConversationCreated = 7;
}

message CPBClientCreateConversationRequest {
	optional CPBClientRequestHeader requestHeader = 1;
	optional CPBClientConversationType type = 2;
	optional uint64 clientGeneratedId = 3;
	optional string name = 4;
	repeated CPBClientInviteeId inviteeIdArray = 5;
	optional CPBClientDeliveryMedium deliveryMedium = 11;
	optional CPBClientInviteToken inviteToken = 12;
	optional string conversationAvatarMediaKey = 14;
}

message CPBClientExistingMedia_Photo {
	optional string photoId = 1;
	optional bool deleteAlbumlessSourcePhoto = 2;
	optional string ownerGaiaId = 3;
	optional bool referenceOriginalPhoto = 4;
}

message CPBClientExistingMedia {
	optional CPBClientExistingMedia_Photo photo = 1;
}

message CPBClientMediaUploadInfo {
	optional Attachment attachment = 1;
}

message CPBClientMessageContent {
	repeated SocialSegment segmentArray = 1;
	repeated Attachment attachmentArray = 2;
}

message CPBClientDeliveryMedium {
	optional CPBClientDeliveryMediumType mediumType = 1;
	optional GCVPhoneNumber selfPhone = 2;
}

message CPBClientInviteeError {
	optional CPBClientInviteeId inviteeId = 1;
	optional string deprecated2 = 2;
	optional string deprecated3 = 3;
	optional bytes deprecated4 = 4;
	optional string errorDescription = 5;
	optional CPBClientInviteeError_ClientInviteeErrorDetail detail = 6;
}

message CPBClientConversationParticipantData {
	optional CPBClientParticipantId id_p = 1;
	optional string fallbackName = 2;
	optional CPBClientInvitationStatus invitationStatus = 3;
	optional GCVPhoneNumber phoneNumber = 4;
	optional CPBClientUserType participantType = 5;
	optional CPBClientInvitationStatus newInvitationStatus = 6;
	optional bool isAnonymousPhone = 7;
}

message CPBClientConversationId {
	optional string id_p = 1;
}

message CPBClientParticipantId {
	optional string gaiaId = 1;
	optional string chatId = 2;
}

message CPBClientInviteeId_ClientLookupMethod_ClientEmailLookup {
	optional string email = 1;
}

message CPBClientInviteeId_ClientLookupMethod_ClientPhoneLookup {
	optional GCVPhoneNumber phoneNumber = 1;
}

message CPBClientInviteeId_ClientLookupMethod {
	optional CPBClientInviteeId_ClientLookupMethod_ClientPhoneLookup phoneLookup = 1;
	optional CPBClientInviteeId_ClientLookupMethod_ClientEmailLookup emailLookup = 2;
}

message CPBClientInviteeId {
	optional string gaiaId = 1;
	optional string circleId = 2;
	optional string chatId = 3;
	optional string fallbackName = 4;
	optional bytes deprecated5 = 5;
	repeated CPBClientInviteeId_ClientLookupMethod lookupMethodArray = 6;
	optional GCVPhoneNumber phone = 7;
}

message CPBClientResponseHeader {
	optional CPBClientResponseStatus status = 1;
	optional string errorDescription = 2;
	optional string debugURL = 3;
	optional uint64 requestTraceId = 4;
	optional uint64 currentServerTime = 5;
	optional uint64 backoffDurationMillis = 6;
	optional string clientGeneratedRequestId = 7;
	optional string localizedUserVisibleErrorMessage = 8;
	optional string buildLabel = 10;
	optional int32 changelistNumber = 11;
}

message CPBClientEventRequestHeader {
	optional CPBClientConversationId conversationId = 1;
	optional uint64 clientGeneratedId = 2;
	optional CPBClientOffTheRecordStatus expectedOtr = 3;
	optional CPBClientDeliveryMedium deliveryMedium = 4;
	optional CPBClientEventType eventType = 5;
}

message CPBClientRequestHeader {
	optional CPBClientClientVersion clientVersion = 1;
	optional CPBClientClientIdentifier clientIdentifier = 2;
	optional CPBClientClientInstrumentationInfo clientInstrumentationInfo = 3;
	optional string languageCode = 4;
	optional bool includeUpdatedConversation = 5;
	optional uint32 retryAttempt = 6;
	optional RtcClient rtcClient = 7;
	optional string clientGeneratedRequestId = 8;
}

message CPBClientClientInstrumentationInfo {
	optional int64 chatMessageSequenceNumber = 1;
}

message CPBClientClientIdentifier {
	optional string resource = 1;
	optional string clientId = 2;
	optional string selfFanoutId = 3;
	optional string participantLogId = 4;
}

message CPBClientClientVersion {
	optional CPBClientClientVersion_ClientId clientId = 1;
	optional CPBClientClientVersion_ClientBuildType buildType = 2;
	optional string majorVersion = 3;
	optional int64 version = 4;
	optional string deviceOsVersion = 5;
	optional string deviceHardware = 6;
}
